Consider a fault-tolerant key-value store that is backed by a Raft service. The store supports two operations:


- A put(key, value)?that inserts a new key-value pair in the store (or sets the value of the key if it already exists), and

- A get(key)?that returns the value of the given key.


Every time a new request comes in, the key-value store executes the request (and replies to the client) only after the request is marked as committed by the Raft leader.

1. Is it possible that clients observe an old value for a key? Explain why or why not.

2. To further improve the key-value store performance, a colleague suggests that you modify the implementation to serve get requests by simply doing a look up in the leader's log and without executing the consensus protocol. Would this affect Raft's consistency guarantees and, if so, how??

ANSWER:
1. Yes, it is. If a client requests the value after a new request comes in but before it is commited, its old value would be observed.

2. Yes, this would affect Raft's consistency guarantees because raft's guarantee is that if any server has applied a particular log entry to its state machine, then no other server may apply a different command for the same log index. As for entries that haven't been applied, they may be overwritten after a leader switch.